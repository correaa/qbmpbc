#ifdef COMPILE_INSTRUCTIONS
        ln -sf $0 .$0.cpp && c++ `#-Wfatal-errors` `#-std=c++0x` .$0.cpp -o .$0.x -D_ATOMIC_HPP_TEST -I../../.. && ./.$0.x $1 $2 $3 $4
	exit;
#endif
#ifndef BOOST_UNITS_SYSTEMS_ATOMIC
#define BOOST_UNITS_SYSTEMS_ATOMIC
//file <unspecified>/units/systems/atomic.hpp

//do not forget to include, so this header is useful
//#include<boost/units/quantity.hpp>??
//#include"boost/units/systems/atomic.hpp" <-this unit system
//#include"boost/units/systems/atomic/si_conversion.hpp" <- to make conversions to SI system

#include <boost/units/base_unit.hpp>

//equivalent to includes in units/systems/si/base.hpp
#include <boost/units/static_constant.hpp>
#include <boost/units/unit.hpp>
#include <boost/units/make_system.hpp>
 
//#include <boost/units/io.hpp> //do not remove: '...has initializer but incomplete type...' error
 
//equivalent to includes in //equivalent to ./base_units/si/*.hpp
#include <boost/units/config.hpp>
#include <boost/units/base_unit.hpp>
#include <boost/units/scaled_base_unit.hpp>
#include <boost/units/physical_dimensions/mass.hpp>
#include <boost/units/physical_dimensions/length.hpp>
#include <boost/units/physical_dimensions/mass.hpp>
#include <boost/units/physical_dimensions/time.hpp>
#include <boost/units/physical_dimensions/velocity.hpp>
#include <boost/units/physical_dimensions/current.hpp>
#include <boost/units/physical_dimensions/electric_charge.hpp>
#include <boost/units/physical_dimensions/angular_momentum.hpp>
#include <boost/units/physical_dimensions/energy.hpp>
#include <boost/units/physical_dimensions/action.hpp>
#include <boost/units/physical_dimensions/temperature.hpp>
#include <boost/units/derived_dimension.hpp>
//begin equivalent to ./base_units/si/*.hpp
//for example boost/units/base_units/atomic/electron_mass.hpp
namespace boost{
namespace units{
namespace atomic{   //define namespace au=boost::units::atomic if necessary 
	using std::string;
	// taken from http://en.wikipedia.org/wiki/Atomic_units#Fundamental_units
	//mass
/*1*/	
	struct electron_mass_base_unit : base_unit<electron_mass_base_unit, mass_dimension, 1>{
		static string name()   {return ("electron_mass");}
		static string symbol() {return ("m_e");}
	};
	//charge
/*2*/ 	
	struct elementary_charge_base_unit : base_unit<
		elementary_charge_base_unit, 
		electric_charge_dimension,//derived_dimension<time_base_dimension,1, current_base_dimension,1>::type,
		2
	>{
 		static string name()   {return ("elementary_charge");}
 		static string symbol() {return ("e");}
 	};
	//action (not angular momentum)
/*3*/ 	struct reduced_planck_constant_base_unit : base_unit<reduced_planck_constant_base_unit, 
		action_dimension, //angular_momentum_dimension, <- in boost.units action!=angular momentum by plane-angle unit
		//derived_dimension<time_base_dimension, -1, length_dimension, 2, mass_dimension, 1>::type,
		3
	>{
 		static string name()	  {return ("reduced_planck_constant");}
 		static string symbol() {return ("hbar");}
 	};
	//electric constant
	struct coulomb_force_constant_base_unit : base_unit<
		coulomb_force_constant_base_unit,
		derived_dimension<
			length_base_dimension,   3,
			mass_base_dimension,     1,
			time_base_dimension,    -4,
			current_base_dimension, -2
		>::type,
		4
	>{
 		static string name()   {return ("coulomb force constant");}
 		static string symbol() {return ("(4 pi epsilon_0)^-1");} //k_1
	};	
	//other options for base units
 	//struct hartree_energy_base_unit : base_unit<hartree_energy_base_unit, energy_dimension, 4>{
 	//	static string name()   {return ("hartree_energy");}
 	//	static string symbol() {return ("E_h");}
 	//};
	//equivalent to ./base_units/si/meter.hpp>
	//struct bohr_radius_base_unit : base_unit<bohr_radius_base_unit, length_dimension, 5>{
	//	static string name()	  {return ("bohr_radius");}
 	//	static string symbol() {return ("a_0");}
 	//};
	struct 
		boltzman_constant_base_unit : base_unit<
		boltzman_constant_base_unit, 
			derived_dimension<
				length_base_dimension, 2,
				mass_base_dimension, 1,
				time_base_dimension, -2, // == ,energy_dimension, 1,
				temperature_base_dimension, -1
			>::type,
			5
		>{
		static string name()  {return ("boltzman constant");}
		static string symbol(){return ("k_B");}
	};    
}}}//nss
//end equivalent to ./base_units/si/*.hpp

//begin boost/units/system/atomic/base.hpp (similar to ./systems/si/base.hpp)
namespace boost{
namespace units{
namespace atomic{
 	typedef make_system<
 		electron_mass_base_unit,
 		elementary_charge_base_unit,
 		reduced_planck_constant_base_unit,
		coulomb_force_constant_base_unit,
 		//hartree_energy_base_unit,
 		//bohr_radius_base_unit,
	    boltzman_constant_base_unit
 	>::type system;
}}}
//end boost/units/system/atomic/base.hpp (similar to ./systems/si/base.hpp)

//begin equivalent to boost/units/systems/si/*.hpp
//for example boost/units/system/atomic/mass|length|electric_charge.hpp
namespace boost{
namespace units{
namespace atomic{
 	typedef unit<dimensionless_type, system> dimensionless;
/*1*/ 	
	typedef unit<mass_dimension,             system> mass;
/*2*/
	typedef unit<electric_charge_dimension,  system> electric_charge;
/*3*/
	typedef unit<action_dimension, system>           action;
/*4*/ // http://www.bipm.org/en/si/si_brochure/chapter4/4-1.html doesn't like this as a base unit
	typedef unit<derived_dimension<
			length_base_dimension,  3,
			mass_base_dimension,    1,
			time_base_dimension,   -4,
			current_base_dimension,-2
	>::type, system> electric_constant;
/*5*/
	typedef unit<
		derived_dimension<
			length_base_dimension,       2,
			mass_base_dimension,         1,
			time_base_dimension,        -2, // == ,energy_dimension, 1,
			temperature_base_dimension, -1
		>::type, 
		system
	> boltzman_constant;
 
/*1*/ 	static const mass              electron_rest_mass,      electron_mass, m_e;
/*2*/ 	static const electric_charge   elementary_charge,       eminus,        e; 
/*3*/ 	static const action            reduced_planck_constant, hbar;
/*4*/	static const electric_constant coulomb_force_constant,  k_1; //name taken from Jackson p. 779 
/*5*/	static const boltzman_constant k_B;
}}}
//end equivalent to units/systems/si/*.hpp


#include<boost/units/physical_dimensions.hpp>
//derived, equiv for example to units/systems/si/area.hpp
namespace boost{
namespace units{
namespace atomic{
	typedef unit<energy_dimension,      system> energy;
	typedef unit<length_dimension,      system> length;
	typedef unit<area_dimension,        system> area;
	typedef unit<volume_dimension,      system> volume;
	typedef unit<pressure_dimension,    system> pressure;
	typedef unit<time_dimension,        system> time;
 	typedef unit<velocity_dimension,    system> velocity;
	typedef unit<temperature_dimension, system> temperature;
	
	typedef unit<wavenumber_dimension,  system> wavenumber;	typedef wavenumber inverse_length; 
	typedef unit<frequency_dimension,   system> frequency;
	typedef	unit<
			derived_dimension<
				length_base_dimension, -3
			>::type, system
		> number_density;

	static const time   time_unit;
 	static const energy energy_unit, hartree_energy, hartree, E_h; 
	static const length length_unit, bohr_radius,    bohr,    a_0, B;
}}}

//begin boost/system/atomic/io.hpp
#include <boost/units/io.hpp>
#include <boost/units/reduce_unit.hpp>
namespace boost {
namespace units {
namespace atomic{
	using std::string;
	//it is useless (confusing?) to add strings for base_units, do it only for derived units
	inline string name_string  (const reduce_unit<time>::type&       ){return "atomic unit of time";       } //gives error with boost 1.37
	inline string symbol_string(const reduce_unit<time>::type&       ){return "(hbar E_h^-1)";             }
	inline string name_string  (const reduce_unit<energy>::type&     ){return "hartree";                   }
	inline string symbol_string(const reduce_unit<energy>::type&     ){return "(E_h)";                     }
	inline string name_string  (const reduce_unit<length>::type&     ){return "bohr radius";               } 
	inline string symbol_string(const reduce_unit<length>::type&     ){return "(a_0)";                     }
	inline string name_string  (const reduce_unit<volume>::type&     ){return "atomic unit of volume";     } 
	inline string symbol_string(const reduce_unit<volume>::type&     ){return "(a_0^3)";                   }
	inline string name_string  (const reduce_unit<velocity>::type&   ){return "atomic unit of velocity";   }
	inline string symbol_string(const reduce_unit<velocity>::type&   ){return "(a_0 E_h hbar^-1)";         }
	inline string name_string  (const reduce_unit<temperature>::type&){return "atomic unit of temperature";}
	inline string symbol_string(const reduce_unit<temperature>::type&){return "(E_h k_B^-1)";              }
}}}
//end boost/system/atomic/io.hpp

namespace boost{namespace units{
namespace nonatomic{ //Non-atomic units, commonly used along with atomic units
	struct rydberg_base_unit : base_unit<rydberg_base_unit, energy_dimension, 76345>{
		static const std::string name() {return "rydberg";}
		static const std::string symbol(){return "Ry";}
	};
	typedef rydberg_base_unit::unit_type rydberg_unit;
	static const rydberg_unit rydberg, Ry;
	//inline std::string symbol_string(const reduce_unit<rydberg_unit>::type&){return "Ry";}
}
}}
BOOST_UNITS_DEFINE_CONVERSION_FACTOR(
	boost::units::nonatomic::rydberg_base_unit,
	boost::units::atomic::energy, //hartree
	double, 0.5 //exact
);
BOOST_UNITS_DEFAULT_CONVERSION(
	boost::units::nonatomic::rydberg_base_unit, 
	boost::units::atomic::energy  //hartree
);

//begin of boost/units/systems/nonsi.hpp
#include <boost/units/base_units/si/meter.hpp>
#include"boost/units/systems/si/io.hpp"
#include<boost/units/base_units/metric/angstrom.hpp> //for "A" output
namespace boost{namespace units{ //taken from http://groups.google.com/group/boostusers/msg/7ecfddc90900717c?
namespace nonsi{ //Non-SI units accepted for use with the SI http://www.bipm.org/en/si/si_brochure/chapter4/4-1.html
	struct electron_volt_base_unit : base_unit<electron_volt_base_unit, energy_dimension, 43289> {
		static const std::string name()   { return "electronvolt";}
		static const std::string symbol() { return "eV"; }
	};
	typedef electron_volt_base_unit::unit_type electron_volt_unit;
	static const electron_volt_unit electron_volt, eV;
	inline std::string symbol_string(const reduce_unit<electron_volt_unit>::type&){return "eV";}
	
	typedef scaled_base_unit<boost::units::si::meter_base_unit, scale<10, static_rational<-10> > > angstrom_base_unit;
	typedef angstrom_base_unit::unit_type angstrom_unit;
	static const angstrom_unit angstrom;
}
}}
BOOST_UNITS_DEFINE_CONVERSION_FACTOR(
	boost::units::nonsi::electron_volt_base_unit,
	boost::units::atomic::energy, 
	double, 0.03674932 //should be defined from available codata, for example electron_volt.value()/atomic::hartree or something
);
BOOST_UNITS_DEFAULT_CONVERSION(
	boost::units::nonsi::electron_volt_base_unit, 
	boost::units::atomic::energy
);
//end of boost/units/systems/nonsi.hpp

//begin of boost/units/power.hpp
namespace boost{
namespace units{
template<class BaseUnit, class Rational>
struct power{
	typedef boost::units::unit<
		typename boost::units::static_power<typename BaseUnit::dimension_type, Rational >::type, 
		typename boost::units::make_system<BaseUnit>::type
	>  unit;
};
template<class BaseUnit, int N>
struct power_int{
	typedef typename power<BaseUnit, typename static_rational<N,1>::type >::unit unit;
};
}}
//end of boost/units/power.hpp

//end of boost/units/static_power.hpp


//begin of boost/units/scale_type.hpp
//#include <boost/units/scaled_base_unit.hpp>
//#include <boost/units/scale.hpp>
#include<boost/units/make_scaled_unit.hpp>
namespace boost{
namespace units{
namespace si{
template<class Unit> struct femto_scaled{typedef typename make_scaled_unit<Unit, scale<10, static_rational<-15> > >::type unit;};
template<class Unit> struct pico_scaled {typedef typename make_scaled_unit<Unit, scale<10, static_rational<-12> > >::type unit;};
template<class Unit> struct nano_scaled {typedef typename make_scaled_unit<Unit, scale<10, static_rational< -9> > >::type unit;};
template<class Unit> struct mega_scaled {typedef typename make_scaled_unit<Unit, scale<10, static_rational< +6> > >::type unit;};
template<class Unit> struct giga_scaled {typedef typename make_scaled_unit<Unit, scale<10, static_rational< +9> > >::type unit;};
}
}}

// begin of units/accumulators.hpp
#include <boost/accumulators/accumulators.hpp>
#include <boost/accumulators/statistics/stats.hpp>
#include <boost/accumulators/statistics/mean.hpp>
#include <boost/accumulators/statistics/moment.hpp>
#include <boost/accumulators/statistics/variance.hpp>
namespace boost {namespace numeric{namespace functional{
	using namespace boost::units;
	template<class Unit, typename Y> struct quantity_tag{}; // struct mydouble_tag{};
	template<class Unit, typename Y> struct tag<quantity<Unit,Y> >{ //template<> struct tag<mydouble>{
		typedef quantity_tag<Unit,Y> type;
	};
    // Specify how to divide an object by an integral count (right)
    template<typename Left, typename Right>
    struct average<Left, Right, quantity_tag<typename Left::unit_type, typename Left::value_type>, void>{
        typedef Left result_type;
        result_type operator()(Left & left, Right & right) const{
            return left/(typename Left::value_type)right;
        }
    };

    template<typename Left, typename Right>
    struct multiplies<Left, Right, quantity_tag<typename Left::unit_type, typename Left::value_type>, quantity_tag<typename Left::unit_type, typename Left::value_type> >{
        typedef 	quantity<power_typeof_helper<
		atomic::energy, //angstrom_unit, 
		static_rational<2> 
	>::type> result_type;
        result_type operator()(Left & left, Right & right) const{
            return left*right;
        }
    };

}}}
//end units/accumulator.hpp
namespace boost{namespace units{
namespace ba=boost::accumulators;
template<class Quantity>
class accumulator_set{
	public:
	ba::accumulator_set<double, ba::stats<ba::tag::mean, ba::tag::variance> > impl_;
	void operator()(Quantity const& q){
		return impl_(q.value());
	}
};
template<class Quantity>
Quantity mean(accumulator_set<Quantity> const& self){
	return Quantity::from_value(ba::mean(self.impl_));
}
template<class Quantity>
quantity<
	typename power_typeof_helper<
		typename Quantity::unit_type, 
		static_rational<2> 
	>::type
> variance(accumulator_set<Quantity> const& self){
	return quantity<
	typename power_typeof_helper<
		typename Quantity::unit_type, 
		static_rational<2> 
	>::type
	>::from_value(ba::variance(self.impl_));
}
}}


#ifdef _ATOMIC_HPP_TEST 

#include"boost/units/systems/si/io.hpp"
#include<boost/units/systems/si/length.hpp>
#include<boost/units/base_units/metric/angstrom.hpp>
namespace boost { namespace units
{
	//typedef metric::angstrom_base_unit::unit_type angstrom_unit;
	//static const angstrom_unit angstrom; //BOOST_UNITS_STATIC_CONSTANT(angstrom, angstrom_unit); 
}}


/*
int main(){
	using namespace boost::units;

	quantity<si::length> L(1.*si::meter);

	std::clog<<"L = "<< L <<std::endl;

	quantity<angstrom_unit> La(10.*si::meter);
	std::clog<<"La = "<<La<<std::endl;
	return 0;
}
*/

#include<iostream>
//#include<boost/units/quantity.hpp>
//#include"boost/units/systems/atomic.hpp"
#include<boost/units/systems/si/prefixes.hpp>
#include<boost/units/systems/si/pressure.hpp>
#include<boost/units/systems/si/time.hpp>
#include"boost/units/systems/si/io.hpp"
#include"boost/units/systems/atomic/si_conversion.hpp"
#include<boost/units/systems/si/codata/physico-chemical_constants.hpp> //for m_u (dalton unit, http://en.wikipedia.org/wiki/Atomic_mass_unit) and k_B (boltzman constant)

#include<boost/units/make_scaled_unit.hpp>
#include<boost/units/cmath.hpp>
#include <boost/units/scaled_base_unit.hpp>
#include <boost/units/static_rational.hpp>
#include <boost/units/scale.hpp>
#include <boost/units/units_fwd.hpp>
#include <boost/units/base_units/si/meter.hpp>

//#include<boost/units/base_units/metric/angstrom.hpp>
using std::cout;
using std::clog;
using std::cerr;
using std::endl;

namespace boost{
namespace units{
namespace atomic{
namespace si_conversion{

template<class Dimension, class Y>
quantity<unit<Dimension, atomic::system>, Y> operator+(
	quantity<unit<Dimension, atomic::system>, Y> const& e1, 
	quantity<unit<Dimension, si::system    >, Y> const& e2
){
	return e1+quantity<unit<Dimension, atomic::system>, Y>(e2); // or e1 + (quantity<atomic::energy, Y>)e2; ???
}
template<class Dimension, class Y>
quantity<unit<Dimension, atomic::system>, Y> operator+(
	quantity<unit<Dimension, si::system    >, Y> const& e1,
	quantity<unit<Dimension, atomic::system>, Y> const& e2
){ 
	return quantity<unit<Dimension, atomic::system>, Y>(e1)+e2;
}
template<class Dimension, class Y>
quantity<unit<Dimension, atomic::system>, Y> operator-(
	quantity<unit<Dimension, atomic::system>, Y> const& e1, 
	quantity<unit<Dimension, si::system    >, Y> const& e2
){
	return e1-quantity<unit<Dimension, atomic::system>, Y>(e2);
}
template<class Dimension, class Y>
quantity<unit<Dimension, atomic::system>, Y> operator-(
	quantity<unit<Dimension, atomic::system>, Y> const& e1,
	quantity<unit<Dimension, atomic::system>, Y> const& e2
){ 
	return quantity<unit<Dimension, atomic::system>, Y>(e1)-e2;
}
}}}}


#include<boost/mpl/divides.hpp>
#include<boost/mpl/times.hpp>

namespace boost { namespace numeric{
/*
	using namespace boost::units;
	quantity<atomic::energy> const& pow(quantity<atomic::energy>  const &x, mpl::int_<1>){
        return x;
    }
	quantity<power_typeof_helper<
		atomic::energy, //angstrom_unit, 
		static_rational<2> 
	>::type> pow(quantity<atomic::energy> const& x, mpl::int_<2>){
		return x*x;
	}*/
    /// INTERNAL ONLY
    ///
    //template<typename T, int N>
    /*
    template<int N>
    //quantity<power_typeof_helper<atomic::energy, static_rational<N> >::type> 
    quantity<
    	power_typeof_helper<atomic::energy::unit_type, static_rational<N> >::type
    >
    //typename power_typeof_helper<quantity<atomic::energy>, static_rational<N> >::type
    pow(
    	quantity<atomic::energy> const &x, 
    	mpl::int_<N>
    ){
    	return pow<N>(x);
        //using namespace operators;
        //typename power_typeof_helper<quantity<atomic::energy>, static_rational<N/2> >::type y = numeric::pow(x, mpl::int_<N/2>());
        //typename power_typeof_helper<quantity<atomic::energy>, static_rational<(N/2) + (N/2)> >::type z = y * y;
        //return (N % 2) ? (z * x) : z;
    }*/
}}


int main(){
	using namespace boost::units;
	
	quantity<si::energy> een1(1.e-17*si::joules);
	quantity<atomic::energy> een2(2.*atomic::hartree);
	
	using namespace boost::units::atomic::si_conversion;	
	quantity<atomic::energy> een3(een1+een2);
	
	cout<<een3<<endl;
	//std::cout<<(31.*atomic::length_unit)<<std::endl;
	quantity<atomic::length> l(1.*atomic::length_unit);
	std::clog<<l<<std::endl;
	quantity<atomic::energy> en(1.*atomic::energy_unit);
	clog<<atomic::hbar/en<<endl;

	//std::cout<<(32.*atomic::hbar*atomic::hbar/(atomic::m_e*atomic::e*atomic::e)/atomic::k_1)<<std::endl;
/*	quantity<atomic::energy> const rydberg = 0.5*atomic::hartree;
	std::cout<<rydberg<<std::endl;
	
	quantity<atomic::pressure> const p_au = 1.*atomic::hartree/atomic::bohr/atomic::bohr/atomic::bohr;
	std::cout<< p_au <<std::endl;
*/
//typedef make_scaled_unit<si::time, scale<10, static_rational<- 9> > >::type ns;
//ns const nanosecond;
//typedef make_scaled_unit<si::time, scale<10, static_rational<-15> > >::type fs;
//fs const femtosecond;
//typedef make_scaled_unit<si::pressure, scale<10, static_rational<9> > >::type gigapascal_dimension;
	//quantity<si::pressure> const p_si = 1.e9*si::giga*si::pascal;
	//quantity<ns> t_si(3.*si::second);
	//t_si = 4.*nanosecond;
	//quantity<gigapascal> const p_si = 1.e9*si::pascal;
	//std::cout<< t_si <<std::endl;

	//quantity<fs> t_si2(120.*femtosecond);
	//t_si2 = 120.*femtosecond;
	//std::cout<<"120 fs = "<< t_si2 <<std::endl;
   
	//quantity<atomic::time> tau(1.*atomic::hbar/atomic::hartree); //*atomic::time_unit; //(120.*si::femto*si::second);
	//clog<<tau<<endl;
	//quantity<atomic::energy> en(4.*atomic::hartree);
	//clog<<(1.*atomic::hbar/atomic::hartree)<<endl;
	quantity<atomic::time> tau(1.*atomic::hbar/atomic::hartree); //tau = 1.*atomic::hbar/atomic::hartree;
	clog<<tau<<endl;
	//quantity<atomic::time> tau = 1.*atomic::hbar/atomic::E_h; //(120.*si::femto*si::second);
	std::cout<<((atomic::hbar/atomic::E_h)/atomic::time_unit)<<std::endl;

	quantity<atomic::time> dt = 2.*atomic::time_unit;
	quantity<atomic::length> dl = 2.*atomic::a_0;
	std::cout<<dt<<", "<<dl<<", "<<dl/dt<<std::endl;
	quantity<atomic::velocity> v(dl/dt);
	std::cout<< v <<std::endl;
	quantity<atomic::mass> m_u(si::constants::codata::m_u.value());
	std::cout<<"m_u in au"<<m_u/atomic::m_e<<std::endl;
	//std::cout<<"kinetic "<< v*v*m_u / si::constants::codata::k_B.value() <<std::endl;
	
	quantity<si::mass> m_e_si(1.*atomic::m_e); std::clog<<m_e_si<<std::endl;
//	quantity<atomic::mass> kg3(3*si::kilogram); std::clog<<kg3<<std::endl;

	//quantity<si::energy> en_si(1.*atomic::E_h); std::clog<<en_si<<std::endl;


//	quantity<atomic::temperature> tt(3.*atomic::E_h/atomic::k_B);	std::cout<<"tt "<<tt<<std::endl;
	quantity<si::temperature> ttsi(4.*si::kelvin); 	std::cout<<"ttsi "<<ttsi<<std::endl;
	
	quantity<boltzman_constant_si_unit> dd(1.*atomic::k_B);
	std::clog<<"k_B = "<<3.*atomic::k_B<< " "<<dd<<std::endl;

	quantity<atomic::electric_charge> ee = 1.*atomic::eminus; std::cout<<"ee = "<<ee<<std::endl;
	quantity<si::electric_charge> eesi(ee); cout<< eesi << endl;

	quantity<atomic::energy> eh = 1.*atomic::E_h; cout<<eh<<endl;
	quantity<si::energy> ehsi(eh); cout<< ehsi <<endl;

	quantity<atomic::temperature> at(1.*si::kelvin); cout<<at<<endl;
	quantity<atomic::temperature> tt(v*v*m_u / si::constants::codata::k_B.value()); cout<<"tt "<<tt<<endl;
	quantity<si::temperature> ttSI(tt);cout<<"ttSI "<<ttSI<<endl;

	quantity<si::temperature> ret(eh / si::constants::codata::k_B.value()); cout<<"ret "<<ret<<endl;

	//	std::cout<<"dd "<<twm_u<<std::endl;
	quantity<si::action> hbarsi(1.*atomic::hbar); cout<<"hbarsi "<<hbarsi<<endl;

	quantity<electric_constant_si_unit> one_over_shit(1.*atomic::k_1); cout<<one_over_shit<<endl;

	quantity<si::pressure> pr(1.*atomic::E_h/atomic::a_0/atomic::a_0/atomic::a_0); cout<<pr<<endl;

	quantity<atomic::length> ldd=1.*atomic::a_0;
	clog<<ldd*ldd*ldd<<endl;
	//quantity<si::energy> ehhh(1.*atomic::E_h); clog<<"ehhh = "<<ehhh<<endl;
	clog<< quantity<si::temperature>(2.*0.138259*1.*atomic::E_h/105./3. / si::constants::codata::k_B.value()) <<endl;

	typedef boost::units::make_scaled_unit<boost::units::si::pressure, boost::units::scale<10, boost::units::static_rational<  9> > >::type gpa_unit;

	typedef scaled_base_unit<boost::units::si::meter_base_unit, scale<10, static_rational<-10> > > angstrom_base_unit;
	typedef metric::angstrom_base_unit::unit_type angstrom_unit;
	static const angstrom_unit angstrom;

	static const gpa_unit gigapascal, GPa; //maybe define conversion factor to pascal or atomic::pressure
	typedef boost::units::quantity<gpa_unit> pressure;
	quantity<gpa_unit> lang(1.*si::giga*si::pascal);
	clog<<lang<<endl;

	quantity<atomic::length> angs(1.*angstrom);
	quantity<angstrom_unit> bohhr(1.*atomic::bohr);
	quantity<atomic::length> lag(10.*atomic::bohr);
	clog<< (double)(quantity<angstrom_unit>(1.*atomic::bohr)/angstrom) <<endl;

	quantity<nonsi::electron_volt_unit> ene = 1.*nonsi::eV;
	cout<<(double)quantity<atomic::dimensionless>(ene/atomic::hartree)<<endl;
	cout<<simplify_typename(4.*si::nano*si::meter)<<std::endl;
	cout<<ene<<std::endl;
	
//	cout<<simplify_typename(4.*si::nano*atomic::eV)<<std::endl;	
//	quantity<atomic::electron_volt_unit> ene2(1.*si::mega*atomic::eV);
//	cout<< 1.*si::mega*atomic::eV  <<std::endl;
	
//	quantity<atomic::energy> one_ev(1.*atomic::eV);
	quantity<atomic::energy> one_MeV(1.*si::mega*nonsi::eV);

	//cout<< _one_ev<<std::endl;
	quantity<si::femto_scaled<si::time>::unit> one_fs(1.*si::femto*si::second);
	quantity<si::femto_scaled<si::time>::unit> one_s(1.*si::second);

	quantity<si::nano_scaled<atomic::energy>::unit> one_nanohartree(1.*si::nano*atomic::hartree);
	quantity<si::nano_scaled<atomic::energy>::unit> one_hartree(1.*atomic::hartree);
	
	quantity<si::mega_scaled<nonsi::electron_volt_unit>::unit> one_Mev(1.*si::mega*nonsi::eV);
	
	
//	quantity<si::mega_scaled<atomic::electron_volt_unit>::unit> one_ev(1.*atomic::eV); //does not compile

	cout<< one_fs<<" "<<one_nanohartree<<" "<< one_Mev <<std::endl;
	cout<< 3.*angstrom<<endl;
	
	quantity<atomic::volume> vv=123.*pow<3>(atomic::a_0);	
	cout<< vv<<endl;
	//using boost::mpl::times; using boost::mpl::divides;
	//cout<< quantity<times<angstrom_unit, times<angstrom_unit, angstrom_unit>::type>::type>(vv)<<endl;
	//auto vvv = pow<3>(3.*angstrom);
	
//	cout<< pow<3>(3.*angstrom) <<" "<<(typeof(pow<3>(1.*angstrom)))(vvv)<<endl;
	cout<< angstrom_unit()<<endl;
	cout<<simplify_typename(pow<3>(3.*angstrom))<<endl;
	quantity<angstrom_unit> L(1.*angstrom);
	typedef	unit<volume_dimension, make_system<angstrom_base_unit>::type> a3_u;

	quantity<a3_u
	> V = pow<3>(L);
	clog<<quantity<si::volume>(V)<<endl;
	
	clog<<simplify_typename(2.*angstrom)<<endl;
	//power_typeof_helper<angstrom_base_unit, static_rational<3,1> >::type ggg ;//=pow<3>(3.*angstrom);
	clog<< fabs(-1.*angstrom) <<endl;
	
	typedef unit<volume_dimension, make_system<angstrom_base_unit>::type> ang3_unit;
	
//	quantity<ang3_unit> vV = pow<3>(3.*angstrom);
/*	quantity<power_typeof_helper<
		quantity<angstrom_unit>::unit_type, //angstrom_unit, 
		static_rational<3> 
	>::type> */
	power_typeof_helper<
		quantity<angstrom_unit>, 
		static_rational<3>
	>::type
	vV =  pow<3>(3.*angstrom);
	clog<<vV<<endl;
	
	quantity<power_typeof_helper<
		atomic::energy, //angstrom_unit, 
		static_rational<2> 
	>::type> eE =  pow<2>(3.*atomic::hartree);
	clog<<eE<<endl;
	typedef typeof(eE) ddd;
	clog<<eE.value()<<"."<<ddd::unit_type()<<std::endl;

	
//using namespace boost::accumulators;


	accumulator_set< quantity<atomic::energy> /*, stats<tag::mean >*/ > acc;

    // push in some data ...
    acc(1.2*atomic::hartree);
    acc(2.3*atomic::hartree);
    //acc(3.4*atomic::hartree);
    //acc(4.5*atomic::hartree);

    // Display the results ...
    std::cout << "Mean:   " << mean(acc) << std::endl;
    std::cout << "Var:   " << sqrt(variance(acc)) << std::endl;
    //std::cout << "Moment: " << moment<2>(acc) << std::endl;
    
   	quantity<atomic::energy> a686(1.*nonatomic::rydberg);
   	quantity<nonatomic::rydberg_unit> aRy(a686);
   	std::cout<< a686 << nonatomic::rydberg_unit() << std::endl;
   	
   
	return 0;
}
#endif
#endif
