#if 0
	cp $0 $0.cpp && c++ -Wall -Wfatal-errors $0.cpp -L$HOME/lib -lgsl -lcblas -latlas -D_TEST_INTERPOLATION_HPP -o ./$0.cpp.x && ./$0.cpp.x $1 $2 $3 $4 $5 $6 $7 $8 $9
	rm -f $0.cpp.x $0.cpp
	exit
#endif
#ifndef INTERPOLATION_HPP
#define INTERPOLATION_HPP

#include<gsl/gsl_interp.h> //doesn't keep data
#include<gsl/gsl_spline.h> //does    keep data
#include<map>
#include<vector>
#include<string>
#include<cassert>
#include<boost/numeric/interval.hpp>
#include<iostream>
namespace gsl{
	namespace interpolation{
	typedef boost::numeric::interval<double> interval;
	class data{
		public:
		data(std::map<double, double> const& data) : 
			xa(data.size()), ya(data.size()){
			{unsigned idx=0; 
			for(std::map<double, double>::const_iterator it=data.begin(); it!=data.end(); ++it, ++idx){
				xa[idx]=it->first;
				ya[idx]=it->second;
			}}
		}
		//since gsl_interp doesn't keep the data I have to keep it here,
		//moreover its has to be stored as linear array
		std::vector<double> xa;
		std::vector<double> ya;
	};
	typedef const gsl_interp_type* type;
	/*
	class interpolation : interpolation_data{
		gsl_interp* pimpl_;
		public:
		static type const linear;           //gsl_interp_linear
		static type const polynomial;       //gsl_interp_polynomial
		static type const cspline;          //gsl_interp_cspline
		static type const cspline_periodic; //gsl_interp_cspline_periodic
		static type const akima;            //gsl_interp_akima
		static type const akima_periodic;   //gsl_interp_akima_periodic
		interpolation(type const& t, std::map<double, double> const& data) : 
			pimpl_(gsl_interp_alloc(t, data.size())), 
			interpolation_data(data){
			assert(data.size()>=gsl_interp_min_size(pimpl_));
			gsl_interp_init(pimpl_, &xa[0], &ya[0], data.size());
		}
		~interpolation(){gsl_interp_free(pimpl_);}
		std::string name() const{return gsl_interp_name(pimpl_);}
	};*/

	type const linear = gsl_interp_linear;
	type const polynomial = gsl_interp_polynomial;
	type const cspline = gsl_interp_cspline;
	type const cspline_periodic = gsl_interp_cspline_periodic;
	type const akima = gsl_interp_akima;
	type const akima_periodic = gsl_interp_akima_periodic;

	//same as interpolation but natively keeps a copy of the data
	class spline : protected data{
		//gsl_spline* const pimpl_;
		gsl_interp* const pimpl_; //using interpolation to make metainfo extraction easier
		public:
		spline(type const& t, std::map<double, double> const& d) : 
			data(d),
			pimpl_(gsl_interp_alloc(t, d.size())){
			//data idata(d);
			assert(d.size()>gsl_interp_min_size(pimpl_));
			gsl_interp_init(pimpl_,&/*idata.*/xa[0], &/*idata.*/ya[0], d.size());
		}
		spline(std::map<double, double> const& d) :
			data(d),
			pimpl_(gsl_interp_alloc(cspline, d.size())){
			assert(d.size()>gsl_interp_min_size(pimpl_));
			//data idata(d);
			gsl_interp_init(pimpl_,&/*idata.*/xa[0], &/*idata.*/ya[0], d.size());
		}
		~spline(){gsl_interp_free(pimpl_);}
		std::string name() const{return gsl_interp_name(pimpl_);}
		double operator()(double const& x) const{return evaluate(x);}
		double evaluate(double const& x) const{
			//accelerator a();
			return gsl_interp_eval(pimpl_, &xa[0], &ya[0],x, NULL);
		}
		double evaluate_derivative(double const& x) const{
			return gsl_interp_eval_deriv(pimpl_, &xa[0], &ya[0], x, NULL);
		}
		double evaluate_integral(interval const& limits) const{
			return gsl_interp_eval_integ(pimpl_, &xa[0], &ya[0], lower(limits), upper(limits), NULL); 
		}
		interval domain() const{
			return interval(xa.front(), xa.back());
		}
	};
	class accelerator{
		gsl_interp_accel* const pimpl_;
		accelerator() : pimpl_(gsl_interp_accel_alloc()){}
		~accelerator(){gsl_interp_accel_free(pimpl_);}
		void reset(){gsl_interp_accel_reset(pimpl_);}
	};
	}//ns interpolation
}//ns gsl
#ifdef _TEST_INTERPOLATION_HPP
#include<iostream>
#include<boost/numeric/interval/io.hpp>
int main(){
	std::map<double, double> data;
	data[1]=3;
	data[2]=5;
	data[3]=6;
	data[6]=8;

	gsl::interpolation::spline p(data);
	std::cout<<p.domain()<<std::endl;


//	for(double x=lower(p.domain()); x<upper(p.domain()); x+= width(p.domain())/1000.){
//		p(x);
//	}			
	//std::cout<<p(100.)<<std::endl;
}
#endif
#endif

